// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Room {
    id         String     @id @default(cuid())
    code       String     @unique
    hostId     String?    @map("host_id")
    host       User?      @relation(fields: [hostId], references: [id])
    name       String?
    status     RoomStatus @default(WAITING)
    numPlayers Int        @default(0) @map("num_players")
    maxPlayers Int        @default(8) @map("max_players")
    private    Boolean    @default(true) @map("private")
    createdAt  DateTime   @default(now()) @map("created_at")
    updatedAt  DateTime   @updatedAt @map("updated_at")

    players      Player[]
    gameSessions GameSession[]

    @@map("room")
}

enum RoomStatus {
    WAITING
    IN_GAME
    FINISHED
    CLOSED
}

model Player {
    id       String   @id @default(cuid())
    name     String   @map("name")
    roomId   String   @map("room_id")
    room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    userId   String?  @map("user_id")
    user     User?    @relation(fields: [userId], references: [id])
    score    Int      @default(0)
    isActive Boolean  @default(true) @map("is_active")
    joinedAt DateTime @default(now()) @map("joined_at")

    wonGames          GameSession[] @relation("Winner")
    answeredQuestions Question[]

    @@unique([roomId, userId, name])
    @@map("player")
}

model Question {
    id         String  @id @default(cuid())
    clue       String  @db.Text
    answer     String  @db.Text
    difficulty Int // 1-5, determines row position
    Player     Player? @relation(fields: [playerId], references: [id])
    playerId   String?

    @@map("question")
}

model QuestionSet {
    id          String    @id @default(cuid())
    title       String
    airDate     DateTime? @map("air_date")
    description String?   @db.Text

    categories QuestionSetCategory[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("question_set")
}

model QuestionSetCategory {
    questionSetId String      @map("question_set_id")
    questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
    categoryId    String      @map("category_id")
    category      Category    @relation(fields: [categoryId], references: [id])
    order         Int         @default(0)

    @@id([questionSetId, categoryId])
    @@map("question_set_category")
}

model Category {
    id          String  @id @default(cuid())
    name        String
    description String? @db.Text

    questionSets QuestionSetCategory[]

    @@unique([name])
    @@map("category")
}

model GameSession {
    id       String     @id @default(cuid())
    roomId   String     @map("room_id")
    room     Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
    status   GameStatus @default(PENDING)
    winnerId String?    @map("winner_id")
    winner   Player?    @relation("Winner", fields: [winnerId], references: [id])

    startedAt DateTime? @map("started_at")
    endedAt   DateTime? @map("ended_at")
    createdAt DateTime  @default(now()) @map("created_at")

    rounds Round[]

    @@map("game_session")
}

model Round {
    id            String      @id @default(cuid())
    gameSessionId String      @map("game_session_id")
    gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
    roundType     RoundType   @map("round_type")
    roundNumber   Int         @map("round_number")

    @@unique([gameSessionId, roundNumber])
    @@map("round")
}

enum RoundType {
    SINGLE_JEOPARDY
    DOUBLE_JEOPARDY
    FINAL_JEOPARDY
}

enum GameStatus {
    PENDING
    ACTIVE
    COMPLETED
}

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean   @map("email_verified")
    image         String?
    createdAt     DateTime  @map("created_at")
    updatedAt     DateTime  @map("updated_at")
    sessions      Session[]
    accounts      Account[]

    hostedRooms Room[]
    players     Player[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime @map("expires_at")
    token     String
    createdAt DateTime @map("created_at")
    updatedAt DateTime @map("updated_at")
    ipAddress String?  @map("ip_address")
    userAgent String?  @map("user_agent")
    userId    String   @map("user_id")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String    @map("account_id")
    providerId            String    @map("provider_id")
    userId                String    @map("user_id")
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?   @map("access_token")
    refreshToken          String?   @map("refresh_token")
    idToken               String?   @map("id_token")
    accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
    refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
    scope                 String?
    password              String?
    createdAt             DateTime  @map("created_at")
    updatedAt             DateTime  @map("updated_at")

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime  @map("expires_at")
    createdAt  DateTime? @map("created_at")
    updatedAt  DateTime? @map("updated_at")

    @@map("verification")
}
